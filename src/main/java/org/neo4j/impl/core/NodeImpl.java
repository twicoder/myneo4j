package org.neo4j.impl.core;

// Java imports
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Logger;

import org.neo4j.api.core.Direction;
import org.neo4j.api.core.Node;
import org.neo4j.api.core.Relationship;
import org.neo4j.api.core.RelationshipType;
import org.neo4j.api.core.ReturnableEvaluator;
import org.neo4j.api.core.StopEvaluator;
import org.neo4j.api.core.Traverser;
import org.neo4j.api.core.Traverser.Order;
import org.neo4j.impl.command.CommandManager;
import org.neo4j.impl.command.ExecuteFailedException;
import org.neo4j.impl.event.Event;
import org.neo4j.impl.event.EventData;
import org.neo4j.impl.event.EventManager;
import org.neo4j.impl.transaction.IllegalResourceException;
import org.neo4j.impl.transaction.LockManager;
import org.neo4j.impl.transaction.LockNotFoundException;
import org.neo4j.impl.transaction.LockType;
import org.neo4j.impl.transaction.NotInTransactionException;
import org.neo4j.impl.transaction.TransactionFactory;
import org.neo4j.impl.transaction.TransactionIsolationLevel;
import org.neo4j.impl.traversal.TraverserFactory;


/**
 * This is the implementation of {@link Node}. Class <CODE>NodeImpl</CODE>
 * has two different states/phases for relationships and properties. 
 * First phase the full node isn't in memory, some or non of the properties and 
 * relationships may be in memory. The second phase (full phase) all properties 
 * or relationships are in memory.
 * <p>
 * All public methods must be invoked within a transaction context, 
 * failure to do so will result in an exception. 
 * Modifing methods will create a command that can execute and undo the desired
 * operation. The command will be associated with the transaction and
 * if the transaction fails all the commands participating in the transaction 
 * will be undone.
 * <p>
 * Methods that uses commands will first create a command and verify that
 * we're in a transaction context. To persist operations a pro-active event 
 * is generated and will cause the 
 * {@link com.windh.kernel.persistence.BusinessLayerMonitor} to persist the 
 * then operation. 
 * If the event fails (false is returned)  the transaction is marked as 
 * rollback only and if the command will be undone.
 * <p>
 * This implementaiton of node does not rely on persistence storage to 
 * enforce contraints. This is done by {@link NeoConstraints} that evaluates
 * the events generated by modifying operations. 
 */
class NodeImpl implements Node, Comparable
{
	private enum NodePhase { 
		EMPTY_PROPERTY, 
		FULL_PROPERTY,
		EMPTY_REL,
		FULL_REL }
	
	private static Logger log = Logger.getLogger( NodeImpl.class.getName() );
	
	private int id = -1;
	private boolean isDeleted = false;
	private NodePhase nodePropPhase;
	private NodePhase nodeRelPhase;
	private Map<RelationshipType,Set<Integer>> relationshipMap = 
		new HashMap<RelationshipType,Set<Integer>>();
	private Map<String,Property> propertyMap = 
		new HashMap<String,Property>();
	
	private static NodeManager nodeManager = 
		NodeManager.getManager();
	private static TraverserFactory travFactory = 
		TraverserFactory.getFactory();

	NodeImpl( int id )
	{
		this.id = id;
		this.nodePropPhase = NodePhase.EMPTY_PROPERTY;
		this.nodeRelPhase = NodePhase.EMPTY_REL;
	}
	
	// newNode will only be true for NodeManager.createNode 
	NodeImpl( int id, boolean newNode )
	{
		this.id = id;
		if ( newNode )
		{
			this.nodePropPhase = NodePhase.FULL_PROPERTY;
			this.nodeRelPhase = NodePhase.FULL_REL;
		}
	}
		
	public long getId()
	{
		return this.id;
	}
	
	public Iterable<Relationship> getRelationships()
	{
		acquireLock( this, LockType.READ );
		try
		{
			ensureFullRelationships();
			if ( relationshipMap == null )
			{
				return Collections.emptyList();
			}
			// Iterate through relationshipMap's values (which are sets 
			// of relationships ids) and merge them all into one list. 
			// Convert it to array and return it.
			// TODO: rewrite this with iterator wrapper
			List<Relationship> allRelationships = 
				new LinkedList<Relationship>();
			Iterator<Set<Integer>> values = 
				relationshipMap.values().iterator();
			while ( values.hasNext() )
			{
				Set<Integer> relTypeSet = values.next();
				for ( int relId : relTypeSet )
				{
					allRelationships.add( 
						nodeManager.getRelationshipById( relId) );
				}
			}
			return allRelationships;
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}
	}
	
	public Iterable<Relationship> getRelationships( Direction dir )
	{
		if ( dir == Direction.BOTH )
		{
			return getRelationships();
		}
		acquireLock( this, LockType.READ );
		try
		{
			ensureFullRelationships();
			if ( relationshipMap == null )
			{
				return Collections.emptyList();
			}
			// Iterate through relationshipMap's values (which are lists 
			// of relationships) and merge them all into one list. Convert it 
			// to array and return it.
			// TODO: rewrite this with iterator wrapper
			List<Relationship> allRelationships = 
				new LinkedList<Relationship>();
			Iterator<Set<Integer>> values = 
				relationshipMap.values().iterator();
			while ( values.hasNext() )
			{
				Set<Integer> relTypeSet = values.next();
				for ( int relId : relTypeSet )
				{
					Relationship rel = nodeManager.getRelationshipById( 
						relId ); 
					if ( dir == Direction.OUTGOING &&
						rel.getStartNode().equals( this ) )
					{
						allRelationships.add( rel );
					}
					else if ( dir == Direction.INCOMING &&
						rel.getEndNode().equals( this ) )
					{
						allRelationships.add( rel );
					}
				}
			}
			return allRelationships;
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}
	}
	
	public Iterable<Relationship> getRelationships( RelationshipType type )
	{
		acquireLock( this, LockType.READ );
		try
		{
			ensureFullRelationships();
			if ( relationshipMap == null )
			{
				return Collections.emptyList();
			}
			// TODO: rewrite with iterator wrapper
			Set<Integer> relationshipSet = relationshipMap.get( type );
			if ( relationshipSet == null )
			{
				return Collections.emptyList();
			}
			else
			{
				List<Relationship> rels = new LinkedList<Relationship>(); 
				Iterator<Integer> values = relationshipSet.iterator();
				while ( values.hasNext() )
				{
					rels.add( nodeManager.getRelationshipById( 
						values.next() ) ); 
				}
				return rels;
			}
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}
	}

	public Iterable<Relationship> getRelationships( RelationshipType... types )
	{
		List<Relationship> rels = new LinkedList<Relationship>();
		for ( RelationshipType type : types )
		{
			for ( Relationship rel : getRelationships( type ) )
			{
				rels.add( rel );
			}
		}
		return rels;
	}
	
	public Relationship getSingleRelationship( RelationshipType type, 
		Direction dir )
	{
		Iterator<Relationship> rels = getRelationships( type, dir ).iterator();
		if ( !rels.hasNext() )
		{
			return null;
		}
		Relationship rel = rels.next();
		if ( rels.hasNext() )
		{
			throw new NotFoundException( "More then one relationship[" + type 
				+ "] found" );
		}
		return rel;
	}

	public Iterable<Relationship> getRelationships( RelationshipType type, 
		Direction dir )
	{
		if ( dir == Direction.BOTH )
		{
			return getRelationships( type );
		}
		acquireLock( this, LockType.READ );
		try
		{
			ensureFullRelationships();
			if ( relationshipMap == null )
			{
				return Collections.emptyList();
			}
			// TODO: rewrite with iterator wrapper
			Set<Integer> relationshipSet = relationshipMap.get( type );
			if ( relationshipSet == null )
			{
				return Collections.emptyList();
			}
			else
			{
				List<Relationship> rels = new LinkedList<Relationship>(); 
				Iterator<Integer> values = relationshipSet.iterator();
				while ( values.hasNext() )
				{
					Relationship rel = nodeManager.getRelationshipById( 
						values.next() ); 
					if ( dir == Direction.OUTGOING &&
						rel.getStartNode().equals( this ) )
					{
						rels.add( rel );
					}
					else if ( dir == Direction.INCOMING &&
						rel.getEndNode().equals( this ) )
					{
						rels.add( rel );
					}
				}
				return rels;
			}
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}
	}
	

	/**
	 * Deletes this node removing it from cache and persistent storage. If 
	 * unable to delete, a <CODE>DeleteException</CODE> is thrown. 
	 * <p>
	 * If the node is in first phase it will be changed to full. This is done 
	 * because we don't rely on the underlying persistance storage to make sure  
	 * all relationships connected to this node has been deleted. Instead 
	 * {@link NeoConstraintsListener} will validate that all deleted nodes in 
	 * the transaction don't have any relationships connected to them before 
	 * the transaction completes.
	 * <p>
	 * Invoking any method on this node after delete is invalid, doing so might 
	 * result in a checked or runtime exception beeing thrown. 
	 *
	 * @throws DeleteException if unable to delete
	 */
	public void delete() // throws DeleteException
	{
		acquireLock( this, LockType.WRITE );
		NodeCommands nodeCommand = null;
		try
		{
			// neo constraints need to validate all rels deleted so we 
			// must have full node
			ensureFullRelationships();
			nodeCommand = new NodeCommands();
			nodeCommand.setNode( this );
			nodeCommand.initDelete();
		
			EventManager em = EventManager.getManager();
			EventData eventData = new EventData( nodeCommand );
			if ( !em.generateProActiveEvent( Event.NODE_DELETE, 
				eventData ) )
			{
				setRollbackOnly();
				throw new DeleteException( 
					"Generate pro-active event failed, " + 
					"unable to delete " + this );
			}
			// normal node phase here isn't necessary, if something breaks we 
			// still have the node as it was in memory and the transaction will 
			// rollback so the full node will still be persistent
			nodeCommand.execute();
			em.generateReActiveEvent( Event.NODE_DELETE, eventData );
		}
		catch ( ExecuteFailedException e )
		{
			setRollbackOnly();
			nodeCommand.undo();
			throw new DeleteException( "Failed executing command deleting " +
				this, e );
		}
		finally
		{
			releaseLock( this, LockType.WRITE );
		}
	}
	
	// Property operations
	
	/**
	 * Returns all properties on <CODE>this</CODE> node. The whole node will be 
	 * loaded (if not full phase already) to make sure that all properties are 
	 * present. 
	 *
	 * @return an object array containing all properties.
	 */
	public Iterable<Object> getPropertyValues()
	{
		acquireLock( this, LockType.READ );
		try
		{
			ensureFullProperties();
			List<Object> properties = new ArrayList<Object>();
			for ( Property property : propertyMap.values() )
			{
				properties.add( property.getValue() );
			}
			return properties;
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}
	}
	
	/**
	 * Returns all property keys on <CODE>this</CODE> node. The whole node will 
	 * be loaded (if not full phase already) to make sure that all properties 
	 * are present.
	 *
	 * @return a string array containing all property keys.
	 */
	public Iterable<String> getPropertyKeys()
	{
		acquireLock( this, LockType.READ );
		try
		{
			ensureFullProperties();
			List<String> propertyKeys = new ArrayList<String>();
			for ( String key : propertyMap.keySet() )
			{
				propertyKeys.add( key );
			}
			return propertyKeys;
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}			
	}

	/**
	 * Returns the property for <CODE>key</CODE>. If key is null or the
	 * property <CODE>key</CODE> dosen't exist {@link NotFoundException} is
	 * thrown. If node is in first phase the cache is first checked and if 
	 * the property isn't found the node enters full phase and the cache is 
	 * checked again.
	 *
	 * @param key the property key
	 * @return the property object
	 * @throws NotFoundException if this property doesn't exist
	 */
	public Object getProperty( String key ) 
		throws NotFoundException
	{
		acquireLock( this, LockType.READ );
		try
		{
			if ( propertyMap.containsKey( key ) )
			{
				return propertyMap.get( key ).getValue();
			}
			ensureFullProperties();
			if ( propertyMap.containsKey( key ) )
			{
				return propertyMap.get( key ).getValue();
			}
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}
		throw new NotFoundException( "" + key + 
			" property not found." );
	}
	
	public Object getProperty( String key, Object defaultValue )
	{
		if ( hasProperty( key ) )
		{
			return getProperty( key );
		}
		return defaultValue;
	}

	/** 
	 * Returns true if this node has the property <CODE>key</CODE>. If node is 
	 * in first phase the cache is first checked and if the property isn't 
	 * found the node enters full phase and the cache is checked again. 
	 * If <CODE>key</CODE> is null false is returned.
	 *
	 * @param key the property key
	 * @return true if <CODE>key</CODE> property exists
	 */
	public boolean hasProperty( String key )
	{
		acquireLock( this, LockType.READ );
		try
		{
			if ( propertyMap.containsKey( key ) )
			{
				return true;
			}
			ensureFullProperties();
			return propertyMap.containsKey( key );
		}
		finally
		{
			releaseLock( this, LockType.READ );
		}			
	}
	
	/**
	 * Adds a new property. Throws IllegalValueException if null parameter or 
	 * a property with <CODE>key</CODE> already exists.
	 * <p>
	 * The node will enter full phase since we must make sure that no 
	 * property <CODE>key</CODE> already exist.
	 *
	 * @param key the property key
	 * @param value the value of the property
	 * @throws IllegalValueException
	 */
	public void setProperty( String key, Object value ) 
		throws IllegalValueException 
	{
		if ( !hasProperty( key ) )
		{
			addProperty( key, value );
		}
		else
		{
			changeProperty( key, value );
		}
	}
	
	void addProperty( String key, Object value ) 
		throws IllegalValueException
	{
		if ( key == null || value == null )
		{
			throw new IllegalValueException( "Null parameter, " +
				"key=" + key + ", " + "value=" + value );
		}
		acquireLock( this, LockType.WRITE );
		NodeCommands nodeCommand = null;
		try
		{
			// must make sure we don't add already existing property
			ensureFullProperties();
			nodeCommand = new NodeCommands(); 
			nodeCommand.setNode( this );
			nodeCommand.initAddProperty( key, new Property( -1, value ) );
			// have to execute command here since the full node is loaded
			// and then the property would already be in cache
			nodeCommand.execute();

			EventManager em = EventManager.getManager();
			EventData eventData = new EventData( nodeCommand );
			if ( !em.generateProActiveEvent( Event.NODE_ADD_PROPERTY, 
				eventData ) )
			{
				setRollbackOnly();
				nodeCommand.undo();
				throw new IllegalValueException( 
					"Generate pro-active event failed, " +
					" unable to add property[" + key + "," + value + 
					"] on " + this );
			}

			em.generateReActiveEvent( Event.NODE_ADD_PROPERTY, eventData );
		}
		catch ( ExecuteFailedException e )
		{
			nodeCommand.undo();
			throw new IllegalValueException( "Failed executing command when " +
				" adding property[" + key + "," + value + 
				"] on " + this, e );
		}
		finally
		{
			releaseLock( this, LockType.WRITE );
		}
	}
	
	/**
	 * Removes the property <CODE>key</CODE>. If null property <CODE>key</CODE> 
	 * or the property doesn't exist a <CODE>NotFoundException</CODE> is 
	 * thrown. 
	 * <p>
	 * If node is in first phase the cache is first checked and if the 
	 * property isn't found the node enters full phase and the cache is 
	 * checked again.
	 *
	 * @param key the property key
	 * @return the removed property value
	 * @throws NotFoundException
	 */
	public Object removeProperty( String key ) throws NotFoundException
	{
		if ( key == null )
		{
			throw new NotFoundException( "Null parameter." );
		}
		acquireLock( this, LockType.WRITE );
		NodeCommands nodeCommand = null;
		try
		{
			// if null or not found make sure full
			ensureFullProperties();

			nodeCommand = new NodeCommands(); 
			nodeCommand.setNode( this );
			
			nodeCommand.initRemoveProperty( doGetProperty( key ).getId(), 
				key );
			// have to execute here for NodeOperationEventData to be correct
			// nodeCommand also checks that the property really exist
			nodeCommand.execute();
			EventManager em = EventManager.getManager();
			EventData eventData = new EventData( nodeCommand );
			if ( !em.generateProActiveEvent( Event.NODE_REMOVE_PROPERTY, 
				eventData ) )
			{
				setRollbackOnly();
				nodeCommand.undo();
				throw new NotFoundException( 
					"Generate pro-active event failed, " +
					"unable to remove property[" + key + "] from " + this );
			}

			em.generateReActiveEvent( Event.NODE_REMOVE_PROPERTY, eventData );
			return nodeCommand.getOldProperty();
		}
		catch ( ExecuteFailedException e )
		{
			nodeCommand.undo();
			throw new NotFoundException( "Failed executing command " +
				"while removing property[" + key + "] on " + this, e );
		}
		finally
		{
			releaseLock( this, LockType.WRITE );
		}
	}
	
	Object changeProperty( String key, Object newValue ) 
		throws IllegalValueException, NotFoundException 
	{
		if ( key == null || newValue == null )
		{
			throw new IllegalValueException( "Null parameter, " +
				"key=" + key + ", " + "value=" + newValue );
		}
		acquireLock( this, LockType.WRITE );
		NodeCommands nodeCommand = null;
		try
		{
			// if null or not found make sure full
			ensureFullProperties();
			nodeCommand = new NodeCommands();
			nodeCommand.setNode( this );
			int propertyId = doGetProperty( key ).getId();
			nodeCommand.initChangeProperty( propertyId, key,  
				new Property( propertyId, newValue ) );
			// have to execute here for NodeOperationEventData to be correct
			nodeCommand.execute();

			EventManager em = EventManager.getManager();
			EventData eventData = new EventData( nodeCommand );
			if ( !em.generateProActiveEvent( Event.NODE_CHANGE_PROPERTY, 
				eventData ) )
			{
				setRollbackOnly();
				nodeCommand.undo();
				throw new IllegalValueException( 
					"Generate pro-active event failed, " +
					" unable to change property[" + key + "," + newValue + 
					"] on " + this );
			}
			
			em.generateReActiveEvent( Event.NODE_CHANGE_PROPERTY, eventData );
			return nodeCommand.getOldProperty();
		}
		catch ( ExecuteFailedException e )
		{
			nodeCommand.undo();
			throw new IllegalValueException( "Failed executing command when " +
				" changing property[" + key + "," + newValue + 
				"] on " + this, e );
		}
		finally
		{
			releaseLock( this, LockType.WRITE );
		}
	}
	
	/**
	 * If object <CODE>node</CODE> is a node, 0 is returned if <CODE>this</CODE>
	 * node id equals <CODE>node's</CODE> node id, 1 if <CODE>this</CODE> 
	 * node id is greater and -1 else.
	 * <p>
	 * If <CODE>node</CODE> isn't a node a ClassCastException will be thrown.
	 *
	 * @param node the node to compare this node with
	 * @return 0 if equal id, 1 if this id is greater else -1
	 */
	// TODO: Verify this implementation
	public int compareTo( Object node )
	{
		Node n = (Node) node;
		int ourId = (int) this.getId(), theirId = (int) n.getId();
		
		if ( ourId < theirId )
		{
			return -1;
		}
		else if ( ourId > theirId )
		{
			return 1;
		}
		else
		{
			return 0;
		}
	}
	
	/**
	 * Returns true if object <CODE>o</CODE> is a node with the same id
	 * as <CODE>this</CODE>.
	 *
	 * @param o the object to compare
	 * @return true if equal, else false
	 */
	public boolean equals( Object o )
	{
		// the id check bellow isn't very expensive so this performance 
		// optimization isn't worth it
		// if ( this == o )
		// {
		// 	return true;
		// }

		// verify type and not null, should use Node inteface
		if ( !(o instanceof Node) )
		{
			return false;
		}
		
		// The equals contract:
		// o reflexive: x.equals(x)
		// o symmetric: x.equals(y) == y.equals(x)
		// o transitive: ( x.equals(y) && y.equals(z) ) == true 
		//				 then x.equals(z) == true
		// o consistent: the nodeId never changes
		return this.getId() == ((Node) o).getId();
		
	}
	
	private volatile int hashCode = 0;
	// must overide hashcode since equals is o
	public int hashCode()
	{
		// hashcode contract:
		// 1. must return the same result for the same object consistenlty
		// 2. if two objects are equal they must produce the same hashcode
		// also two distinct object should (not required) produce different
		// hash values, ideally a hash function should distribute any 
		// collection uniformly across all possible hash values
		
		// we have 
		if ( hashCode == 0 )
		{
			// this one is so leet, if you don't understand, that is ok...
			// you're just not on the same elitness level as some of us, 
			// nothing to be ashamed of
			hashCode = 3217 * (int) this.getId();
		}
		return hashCode;

		// or maybe this is enough when we have zillions of nodes?
		// return this.id;
	}
	
	/**
	 * Returns this node's string representaiton. 
	 * 
	 * @return the string representaiton of this node
	 */
	public String toString()
	{
		return "Node #" + this.getId();
	}
	
	/**
	 * NOTE: caller is responsible for acquiring write lock on this node
	 * before calling this method.
	 */
	void doAddProperty( String key, Property value )
		throws IllegalValueException
	{
		if ( propertyMap.containsKey( key ) )
		{
			throw new IllegalValueException( "Property[" + key + 
				"] already added." );
		}
		propertyMap.put( key, value );
	}

	 // caller is responsible for acquiring lock
	Property doRemoveProperty( String key ) throws NotFoundException
	{
		if ( propertyMap.containsKey( key ) )
		{
			return propertyMap.remove( key );
		}
		throw new NotFoundException( "Property not found: " +	key );
	}

	 // caller is responsible for acquiring lock
	Property doChangeProperty( String key, Property newValue )
		throws IllegalValueException, NotFoundException
	{
		if ( propertyMap.containsKey( key ) )
		{
			Property oldValue  = propertyMap.get( key );
			if ( !oldValue.getValue().getClass().equals( 
					newValue.getValue().getClass() ) )
			{
				throw new IllegalValueException( "New value[" + 
					newValue.getValue() + 
					" not same type as old value[" + 
					oldValue.getValue() + "]" );
			}
			propertyMap.put( key, newValue );
			return oldValue;
		}
		throw new NotFoundException( "Property not found: " + key );
	}
	
	 // caller is responsible for acquiring lock
	Property doGetProperty( String key ) throws NotFoundException
	{
		if ( propertyMap.containsKey( key ) )
		{
			return propertyMap.get( key );
		}
		throw new NotFoundException( "Property not found: " + key );
	}

	 // caller is responsible for acquiring lock
	 // this method is only called when a relationship is created or 
	 // a relationship delete is undone or when the full node is loaded
	void addRelationship( RelationshipType type, Integer relId ) 
	{
		Set<Integer> relationshipSet = relationshipMap.get( type );
		if ( relationshipSet == null )
		{
			relationshipSet = new LinkedHashSet<Integer>();
			relationshipMap.put( type, relationshipSet );
		}
		relationshipSet.add( relId );
	}
	
	 // caller is responsible for acquiring lock
	 // this method is only called when a undo create relationship or
	 // a relationship delete is invoked.
	void removeRelationship( RelationshipType type, Integer relId )
	{
		Set<Integer> relationshipSet = relationshipMap.get( type );
		if ( relationshipSet != null )
		{
			relationshipSet.remove( relId );
			if ( relationshipSet.size() == 0 )
			{
				relationshipMap.remove( type );
			}
		}
	}
	
	boolean hasRelationships()
	{
		return ( relationshipMap.size() > 0 );
	}
	
	private void setRollbackOnly()
	{
		try
		{
			TransactionFactory.getTransactionManager().setRollbackOnly();
		}
		catch ( javax.transaction.SystemException se )
		{
			se.printStackTrace();
			log.severe( "Failed to set transaction rollback only" );
		}
	}

	private void ensureFullProperties()
	{
		if ( nodePropPhase != NodePhase.FULL_PROPERTY )
		{
			RawPropertyData[] rawProperties = 
				NodeManager.getManager().loadProperties( this );
			Set<Integer> addedProps = new LinkedHashSet<Integer>();
			Map<String,Property> newPropertyMap = 
				new HashMap<String,Property>();
			for ( RawPropertyData propData : rawProperties )
			{
				int propId = propData.getId();
				assert !addedProps.contains( propId );
				addedProps.add( propId );
				Property property = new Property( propId, 
					propData.getValue() );
				newPropertyMap.put( propData.getKey(), property );
			}
			for ( String key : this.propertyMap.keySet() )
			{
				Property prop = propertyMap.get( key );
				if ( !addedProps.contains( prop.getId() ) )
				{
					newPropertyMap.put( key, prop );
				}
			}
			this.propertyMap = newPropertyMap;
			nodePropPhase = NodePhase.FULL_PROPERTY;
		}
	}
	
	private void ensureFullRelationships()
	{
		if ( nodeRelPhase != NodePhase.FULL_REL )
		{
			List<Relationship> fullRelationshipList = 
				NodeManager.getManager().loadRelationships( this );
			Set<Integer> addedRels = new HashSet<Integer>();
			Map<RelationshipType,Set<Integer>> newRelationshipMap = 
				new HashMap<RelationshipType,Set<Integer>>();
			for ( Relationship rel : fullRelationshipList )
			{
				int relId = (int) rel.getId();
				assert !addedRels.contains( relId );
				addedRels.add( relId );
				RelationshipType type = rel.getType();
				Set<Integer> relationshipSet = newRelationshipMap.get( type );
				if ( relationshipSet == null )
				{
					relationshipSet = new LinkedHashSet<Integer>();
					newRelationshipMap.put( type, relationshipSet );
				}
				relationshipSet.add( relId );
			}
			for ( RelationshipType type : this.relationshipMap.keySet() )
			{
				Set<Integer> relationshipSet = 
					this.relationshipMap.get( type );
				for ( Integer relId : relationshipSet )
				{
					if ( !addedRels.contains( relId ) )
					{
						Set<Integer> newRelationshipSet = 
							newRelationshipMap.get( type );
						if ( newRelationshipSet == null )
						{
							newRelationshipSet = new LinkedHashSet<Integer>();
							newRelationshipMap.put( type, 
								newRelationshipSet );
						}
						newRelationshipSet.add( relId );
						addedRels.add( relId );
					}
				}
			}
			this.relationshipMap = newRelationshipMap;
			nodeRelPhase = NodePhase.FULL_REL;
		}
	}
	
	private void acquireLock( Object resource, LockType lockType )
	{
		try
		{
			// make sure we're in transaction
			TransactionFactory.getTransactionIsolationLevel();
			if ( lockType == LockType.READ )
			{
				LockManager.getManager().getReadLock( resource );
			}
			else if ( lockType == LockType.WRITE )
			{
				LockManager.getManager().getWriteLock( resource );
			}
			else
			{
				throw new RuntimeException( "Unkown lock type: " + lockType );
			}
		}
		catch ( NotInTransactionException e )
		{
			throw new RuntimeException( 
				"Unable to get transaction isolation level.", e );
		}
		catch ( IllegalResourceException e )
		{
			throw new RuntimeException( e );
		}
	}
	
	private void releaseLock( Object resource, LockType lockType )
	{
		releaseLock( resource, lockType, false );
	}

	private void releaseLock( Object resource, LockType lockType, 
		boolean forceRelease )
	{
		try
		{
			TransactionIsolationLevel level = 
				TransactionFactory.getTransactionIsolationLevel();
			if ( level == TransactionIsolationLevel.READ_COMMITTED )
			{
				if ( lockType == LockType.READ )
				{
					LockManager.getManager().releaseReadLock( resource );
				}
				else if ( lockType == LockType.WRITE )
				{
					if ( forceRelease ) 
					{
						LockManager.getManager().releaseWriteLock( resource );
					}
					else
					{
						CommandManager.getManager().addLockToTransaction( resource, 
							lockType );
					}
				}
				else
				{
					throw new RuntimeException( "Unkown lock type: " + 
						lockType );
				}
			}
			else if ( level == TransactionIsolationLevel.BAD )
			{
				CommandManager.getManager().addLockToTransaction( resource, 
					lockType );
			}
			else
			{
				throw new RuntimeException( 
					"Unkown transaction isolation level, " + level );
			}
		}
		catch ( NotInTransactionException e )
		{
			e.printStackTrace();
			throw new RuntimeException( 
				"Unable to get transaction isolation level.", e );
		}
		catch ( LockNotFoundException e )
		{
			throw new RuntimeException( 
				"Unable to release locks.", e );
		}
		catch ( IllegalResourceException e )
		{
			throw new RuntimeException( 
				"Unable to release locks.", e );
		}
	}
	
	boolean isDeleted()
	{
		return isDeleted;
	}
	
	void setIsDeleted( boolean flag )
	{
		isDeleted = flag;
	}
	
	public Relationship createRelationshipTo( Node otherNode, 
		RelationshipType type )
	{
		return nodeManager.createRelationship( this, otherNode, type );
	}

	public Traverser traverse( Order traversalOrder, 
		StopEvaluator stopEvaluator, ReturnableEvaluator returnableEvaluator, 
		RelationshipType relationshipType, Direction direction )
	{
		return travFactory.createTraverser( traversalOrder, this, 
			relationshipType, direction, stopEvaluator, returnableEvaluator );
	}

	public Traverser traverse( Order traversalOrder, 
		StopEvaluator stopEvaluator, ReturnableEvaluator returnableEvaluator, 
		RelationshipType firstRelationshipType, Direction firstDirection, 
		RelationshipType secondRelationshipType, Direction secondDirection )
	{
		RelationshipType[] types = new RelationshipType[2];
		Direction[] dirs = new Direction[2];
		types[0] = firstRelationshipType;
		types[1] = secondRelationshipType;
		dirs[0] = firstDirection;
		dirs[1] = secondDirection;
		return travFactory.createTraverser( traversalOrder, this, types, dirs, 
			stopEvaluator, returnableEvaluator );
	}

	public Traverser traverse( Order traversalOrder, 
		StopEvaluator stopEvaluator, 
		ReturnableEvaluator returnableEvaluator, 
		Object... relationshipTypesAndDirections )
	{
		int elements = relationshipTypesAndDirections.length / 2; 
		RelationshipType[] types = new RelationshipType[ elements ];
		Direction[] dirs = new Direction[ elements ];
		int j = 0;
		for ( int i = 0; i < elements; i++ )
		{
			types[i] = ( RelationshipType ) 
				relationshipTypesAndDirections[j++];
			dirs[i] = ( Direction ) relationshipTypesAndDirections[j++];
		}
		return travFactory.createTraverser( traversalOrder, this, types, dirs, 
			stopEvaluator, returnableEvaluator );
	}
}
